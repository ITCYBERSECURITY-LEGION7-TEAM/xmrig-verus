#!/bin/bash

# Mining Manager Script
# Supports Vipor and Luckpool with Hacker UI Animation

# Colors for UI
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Animation variables
ANIMATION_SPEED=0.1
PROGRESS_BAR_WIDTH=50

# Mining process variables
MINING_PID=""
CURRENT_CONFIG=""

# Function to display banner
show_banner() {
    clear
    echo -e "${CYAN}"
    echo " ███╗   ███╗██╗███╗   ██╗██╗███╗   ██╗ ██████╗ "
    echo " ████╗ ████║██║████╗  ██║██║████╗  ██║██╔════╝ "
    echo " ██╔████╔██║██║██╔██╗ ██║██║██╔██╗ ██║██║  ███╗"
    echo " ██║╚██╔╝██║██║██║╚██╗██║██║██║╚██╗██║██║   ██║"
    echo " ██║ ╚═╝ ██║██║██║ ╚████║██║██║ ╚████║╚██████╔╝"
    echo " ╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝╚═╝╚═╝  ╚═══╝ ╚═════╝ "
    echo -e "${NC}"
    echo -e "${GREEN}          MINING MANAGER v2.0${NC}"
    echo -e "${YELLOW}     VIPOR & LUCKPOOL SUPPORT${NC}"
    echo "=========================================="
}

# Function to show loading animation
show_loading() {
    local text=$1
    echo -ne "${CYAN}[${text}]${NC} ${GREEN}"
    for i in {1..20}; do
        echo -n "■"
        sleep 0.1
    done
    echo -e "${NC}"
}

# Function to show progress bar
show_progress() {
    local percentage=$1
    local text=$2
    local filled=$((percentage * PROGRESS_BAR_WIDTH / 100))
    local empty=$((PROGRESS_BAR_WIDTH - filled))
    
    echo -ne "${CYAN}[${text}]${NC} ${PURPLE}[${NC}"
    for i in $(seq 1 $filled); do
        echo -ne "${GREEN}█${NC}"
    done
    for i in $(seq 1 $empty); do
        echo -ne "${RED}░${NC}"
    done
    echo -ne "${PURPLE}] ${percentage}%${NC}\r"
}

# Function to create hacker animation
hacker_animation() {
    echo -e "${GREEN}"
    echo "INITIALIZING MINING SYSTEM..."
    echo -e "${NC}"
    
    for i in {1..100}; do
        show_progress $i "SYSTEM BOOT"
        sleep 0.02
    done
    echo -e "\n"
    
    # Matrix-like animation
    echo -e "${GREEN}CONNECTING TO BLOCKCHAIN NETWORK...${NC}"
    for i in {1..5}; do
        echo -ne "${CYAN}[${i}/5] Establishing secure connection${NC}"
        sleep 0.3
        echo -ne "${CYAN} .${NC}"
        sleep 0.3
        echo -ne "${CYAN} .${NC}"
        sleep 0.3
        echo -ne "${CYAN} .${NC}"
        sleep 0.3
        echo -e "${GREEN} ✓${NC}"
    done
}

# Function to create config.json
create_config() {
    local pool=$1
    local wallet=$2
    local worker=$3
    local cpu_usage=$4
    local pool_type=$5
    
    CURRENT_CONFIG="$pool_type|$pool|$wallet|$worker|$cpu_usage"
    
    cat > config.json << EOF
{
    "pool": "$pool",
    "wallet": "$wallet",
    "worker": "$worker",
    "cpu_usage": "$cpu_usage",
    "pool_type": "$pool_type",
    "algorithm": "verushash",
    "threads": $cpu_usage,
    "tls": false,
    "verbose": true,
    "timestamp": "$(date '+%Y-%m-%d %H:%M:%S')"
}
EOF
}

# Function to get CPU usage input
get_cpu_usage() {
    local total_cores=$(nproc)
    while true; do
        echo -e "${YELLOW}"
        echo "Available CPU Cores: $total_cores"
        echo -e "${NC}"
        read -p "Enter CPU usage (number of threads, 1-$total_cores): " cpu_usage
        
        if [[ $cpu_usage =~ ^[0-9]+$ ]] && [ $cpu_usage -ge 1 ] && [ $cpu_usage -le $total_cores ]; then
            break
        else
            echo -e "${RED}Invalid input! Please enter a number between 1 and $total_cores${NC}"
        fi
    done
    echo $cpu_usage
}

# Function to setup Vipor mining
setup_vipor() {
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════╗"
    echo "║           VIPOR MINING SETUP         ║"
    echo "╚══════════════════════════════════════╝"
    echo -e "${NC}"
    
    # Vipor pools
    vipor_pools=(
        "sg.vipor.net:5040"
        "eu.vipor.net:5040"
        "us.vipor.net:5040"
        "asia.vipor.net:5040"
        "au.vipor.net:5040"
        "ca.vipor.net:5040"
        "de.vipor.net:5040"
        "fr.vipor.net:5040"
        "jp.vipor.net:5040"
        "kr.vipor.net:5040"
    )
    
    echo -e "${YELLOW}Available Vipor Pools:${NC}"
    for i in "${!vipor_pools[@]}"; do
        echo -e "${GREEN}$((i+1)). ${vipor_pools[i]}${NC}"
    done
    
    local pool_choice
    while true; do
        read -p "Select pool (1-${#vipor_pools[@]}): " pool_choice
        if [[ $pool_choice =~ ^[0-9]+$ ]] && [ $pool_choice -ge 1 ] && [ $pool_choice -le ${#vipor_pools[@]} ]; then
            break
        else
            echo -e "${RED}Invalid choice! Please select 1-${#vipor_pools[@]}${NC}"
        fi
    done
    
    local selected_pool=${vipor_pools[$((pool_choice-1))]}
    
    echo -e "${YELLOW}"
    read -p "Enter your Wallet Address: " wallet
    read -p "Enter Worker Name: " worker
    echo -e "${NC}"
    
    local cpu_usage=$(get_cpu_usage)
    
    # Create config
    create_config "$selected_pool" "$wallet" "$worker" "$cpu_usage" "vipor"
    
    echo -e "${GREEN}"
    echo "✓ Vipor Mining Configuration Created!"
    echo "  Pool: $selected_pool"
    echo "  Wallet: $wallet"
    echo "  Worker: $worker"
    echo "  CPU Threads: $cpu_usage"
    echo -e "${NC}"
}

# Function to setup Luckpool mining
setup_luckpool() {
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════╗"
    echo "║          LUCKPOOL MINING SETUP       ║"
    echo "╚══════════════════════════════════════╝"
    echo -e "${NC}"
    
    # Luckpool pools
    luckpool_pools=(
        "na.luckpool.net:3960"
        "eu.luckpool.net:3960"
        "ap.luckpool.net:3960"
        "sa.luckpool.net:3960"
        "ca.luckpool.net:3960"
        "us.luckpool.net:3960"
        "de.luckpool.net:3960"
        "fr.luckpool.net:3960"
        "jp.luckpool.net:3960"
        "sg.luckpool.net:3960"
    )
    
    echo -e "${YELLOW}Available Luckpool Pools:${NC}"
    for i in "${!luckpool_pools[@]}"; do
        echo -e "${GREEN}$((i+1)). ${luckpool_pools[i]}${NC}"
    done
    
    local pool_choice
    while true; do
        read -p "Select pool (1-${#luckpool_pools[@]}): " pool_choice
        if [[ $pool_choice =~ ^[0-9]+$ ]] && [ $pool_choice -ge 1 ] && [ $pool_choice -le ${#luckpool_pools[@]} ]; then
            break
        else
            echo -e "${RED}Invalid choice! Please select 1-${#luckpool_pools[@]}${NC}"
        fi
    done
    
    local selected_pool=${luckpool_pools[$((pool_choice-1))]}
    
    echo -e "${YELLOW}"
    read -p "Enter your Wallet Address: " wallet
    read -p "Enter Worker Name: " worker
    echo -e "${NC}"
    
    local cpu_usage=$(get_cpu_usage)
    
    # Create config
    create_config "$selected_pool" "$wallet" "$worker" "$cpu_usage" "luckpool"
    
    echo -e "${GREEN}"
    echo "✓ Luckpool Mining Configuration Created!"
    echo "  Pool: $selected_pool"
    echo "  Wallet: $wallet"
    echo "  Worker: $worker"
    echo "  CPU Threads: $cpu_usage"
    echo -e "${NC}"
}

# Function to start mining
start_mining() {
    if [ ! -f "config.json" ]; then
        echo -e "${RED}Error: No configuration found!${NC}"
        echo -e "${YELLOW}Please setup mining configuration first.${NC}"
        read -p "Press Enter to continue..."
        return 1
    fi
    
    # Check if mining is already running
    if [ ! -z "$MINING_PID" ] && kill -0 $MINING_PID 2>/dev/null; then
        echo -e "${YELLOW}Mining is already running!${NC}"
        echo -e "${RED}Please stop current mining process first.${NC}"
        read -p "Press Enter to continue..."
        return 1
    fi
    
    hacker_animation
    
    # Read config
    local pool=$(grep '"pool"' config.json | cut -d'"' -f4)
    local wallet=$(grep '"wallet"' config.json | cut -d'"' -f4)
    local worker=$(grep '"worker"' config.json | cut -d'"' -f4)
    local cpu_usage=$(grep '"cpu_usage"' config.json | cut -d'"' -f4)
    local pool_type=$(grep '"pool_type"' config.json | cut -d'"' -f4)
    
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════╗"
    echo "║            STARTING MINING           ║"
    echo "╚══════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${GREEN}Mining Configuration:${NC}"
    echo -e "  Pool Type: $pool_type"
    echo -e "  Pool: $pool"
    echo -e "  Wallet: $wallet"
    echo -e "  Worker: $worker"
    echo -e "  CPU Threads: $cpu_usage"
    echo -e "  Algorithm: verushash"
    echo ""
    
    show_loading "Initializing Mining Process"
    
    # Start mining in background
    echo -e "${CYAN}Starting HellMiner...${NC}"
    echo -e "${YELLOW}Mining output will be displayed below:${NC}"
    echo -e "${PURPLE}==========================================${NC}"
    
    # Start xmrig and capture PID
    ./xmrig -c $pool -u $wallet.$worker -p x --cpu $cpu_usage &
    MINING_PID=$!
    
    # Save PID to file
    echo $MINING_PID > mining.pid
    
    echo -e "${GREEN}✓ Mining started successfully!${NC}"
    echo -e "${YELLOW}Mining PID: $MINING_PID${NC}"
    echo -e "${CYAN}To stop mining, use the Stop Mining option in menu.${NC}"
    echo ""
    
    # Wait a bit and check if process is still running
    sleep 3
    if kill -0 $MINING_PID 2>/dev/null; then
        echo -e "${GREEN}✓ Mining process is running normally${NC}"
    else
        echo -e "${RED}✗ Mining process failed to start${NC}"
        MINING_PID=""
    fi
    
    read -p "Press Enter to return to main menu..."
}

# Function to stop mining
stop_mining() {
    if [ -z "$MINING_PID" ]; then
        # Try to get PID from file
        if [ -f "mining.pid" ]; then
            MINING_PID=$(cat mining.pid)
        fi
    fi
    
    if [ -z "$MINING_PID" ]; then
        echo -e "${YELLOW}No mining process found.${NC}"
        return 1
    fi
    
    if kill -0 $MINING_PID 2>/dev/null; then
        echo -e "${YELLOW}Stopping mining process (PID: $MINING_PID)...${NC}"
        kill $MINING_PID
        sleep 2
        
        # Force kill if still running
        if kill -0 $MINING_PID 2>/dev/null; then
            echo -e "${RED}Force stopping mining process...${NC}"
            kill -9 $MINING_PID
        fi
        
        MINING_PID=""
        rm -f mining.pid 2>/dev/null
        
        echo -e "${GREEN}✓ Mining stopped successfully!${NC}"
    else
        echo -e "${YELLOW}Mining process not running.${NC}"
        MINING_PID=""
        rm -f mining.pid 2>/dev/null
    fi
    
    read -p "Press Enter to continue..."
}

# Function to show mining status
show_mining_status() {
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════╗"
    echo "║           MINING STATUS              ║"
    echo "╚══════════════════════════════════════╝"
    echo -e "${NC}"
    
    # Check if mining is running
    local current_pid=""
    if [ -f "mining.pid" ]; then
        current_pid=$(cat mining.pid)
    fi
    
    if [ ! -z "$current_pid" ] && kill -0 $current_pid 2>/dev/null; then
        echo -e "${GREEN}✓ Mining is RUNNING${NC}"
        echo -e "  PID: $current_pid"
        MINING_PID=$current_pid
        
        # Show process info
        if ps -p $current_pid > /dev/null; then
            echo -e "  Process: $(ps -p $current_pid -o comm=)"
            echo -e "  Runtime: $(ps -p $current_pid -o etime=)"
        fi
    else
        echo -e "${RED}✗ Mining is STOPPED${NC}"
        MINING_PID=""
        rm -f mining.pid 2>/dev/null
    fi
    
    echo ""
    
    # Show configuration if exists
    if [ -f "config.json" ]; then
        echo -e "${YELLOW}Current Configuration:${NC}"
        grep -E '"pool_type|"pool"|"wallet"|"worker"|"cpu_usage"|"timestamp"' config.json | while read line; do
            key=$(echo $line | cut -d'"' -f2)
            value=$(echo $line | cut -d'"' -f4)
            echo -e "  ${CYAN}$key: ${WHITE}$value${NC}"
        done
    else
        echo -e "${YELLOW}No configuration found.${NC}"
    fi
    
    echo ""
    read -p "Press Enter to continue..."
}

# Function to show current configuration
show_config() {
    if [ -f "config.json" ]; then
        echo -e "${CYAN}"
        echo "╔══════════════════════════════════════╗"
        echo "║       CURRENT CONFIGURATION          ║"
        echo "╚══════════════════════════════════════╝"
        echo -e "${NC}"
        cat config.json
        echo -e "\n"
    else
        echo -e "${RED}No configuration file found!${NC}"
    fi
    read -p "Press Enter to continue..."
}

# Function to show system info
show_system_info() {
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════╗"
    echo "║           SYSTEM INFORMATION         ║"
    echo "╚══════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${YELLOW}CPU Information:${NC}"
    echo -e "  Cores: $(nproc)"
    echo -e "  Model: $(grep "model name" /proc/cpuinfo | head -1 | cut -d: -f2 | xargs)"
    
    echo -e "${YELLOW}Memory Information:${NC}"
    echo -e "  Total: $(free -h | grep Mem | awk '{print $2}')"
    echo -e "  Used: $(free -h | grep Mem | awk '{print $3}')"
    echo -e "  Free: $(free -h | grep Mem | awk '{print $4}')"
    
    echo -e "${YELLOW}Uptime:${NC}"
    echo -e "  $(uptime -p)"
    
    echo -e "${YELLOW}Disk Usage:${NC}"
    echo -e "  $(df -h / | awk 'NR==2 {print $3 " used / " $2 " total (" $5 ")"}')"
    
    read -p "Press Enter to continue..."
}

# Main menu
main_menu() {
    while true; do
        show_banner
        
        # Show mining status in menu
        if [ -f "mining.pid" ] && kill -0 $(cat mining.pid) 2>/dev/null; then
            echo -e "${GREEN}🟢 MINING ACTIVE - PID: $(cat mining.pid)${NC}"
            echo ""
        else
            echo -e "${RED}🔴 MINING STOPPED${NC}"
            echo ""
        fi
        
        echo -e "${WHITE}Select Option:${NC}"
        echo -e "${GREEN}1. VIPOR Mining Setup${NC}"
        echo -e "${BLUE}2. LUCKPOOL Mining Setup${NC}"
        echo -e "${YELLOW}3. START Mining${NC}"
        echo -e "${RED}4. STOP Mining${NC}"
        echo -e "${CYAN}5. Mining Status${NC}"
        echo -e "${PURPLE}6. Show Configuration${NC}"
        echo -e "${WHITE}7. System Information${NC}"
        echo -e "${RED}8. Exit${NC}"
        echo ""
        
        read -p "Enter your choice (1-8): " choice
        
        case $choice in
            1)
                setup_vipor
                read -p "Press Enter to continue..."
                ;;
            2)
                setup_luckpool
                read -p "Press Enter to continue..."
                ;;
            3)
                start_mining
                ;;
            4)
                stop_mining
                ;;
            5)
                show_mining_status
                ;;
            6)
                show_config
                ;;
            7)
                show_system_info
                ;;
            8)
                # Stop mining before exit
                if [ -f "mining.pid" ] && kill -0 $(cat mining.pid) 2>/dev/null; then
                    echo -e "${YELLOW}Stopping mining process before exit...${NC}"
                    kill $(cat mining.pid) 2>/dev/null
                    rm -f mining.pid
                fi
                echo -e "${GREEN}Thank you for using Mining Manager!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid choice! Please select 1-8${NC}"
                sleep 2
                ;;
        esac
    done
}

# Check if xmrig exists
check_xmrig() {
    if [ ! -f "./xmrig" ]; then
        echo -e "${RED}Error: xmrig not found in current directory!${NC}"
        echo -e "${YELLOW}Please make sure xmrig is in the same directory as this script.${NC}"
        exit 1
    fi
    
    if [ ! -x "./xmrig" ]; then
        chmod +x ./xmrig
        echo -e "${GREEN}✓ xmrig made executable${NC}"
    fi
}

# Cleanup function
cleanup() {
    if [ ! -z "$MINING_PID" ]; then
        kill $MINING_PID 2>/dev/null
    fi
    rm -f mining.pid 2>/dev/null
}

# Set trap for cleanup
trap cleanup EXIT

# Main execution
main() {
    # Check dependencies
    if ! command -v nproc &> /dev/null; then
        echo -e "${RED}Error: nproc command not found${NC}"
        exit 1
    fi
    
    # Check xmrig
    check_xmrig
    
    # Start main menu
    main_menu
}

# Run main function
main "$@"
